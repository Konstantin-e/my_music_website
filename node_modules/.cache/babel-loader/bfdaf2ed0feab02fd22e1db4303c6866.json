{"ast":null,"code":"var _jsxFileName = \"/Users/konstantine/Desktop/My Page/Sass/my_music_website/react/koi-music/src/components/MusicSection.js\";\nimport React from 'react';\nimport Track from './Track';\nimport songs from '../songs';\n\nclass MusicSection extends React.Component {\n  constructor() {\n    super();\n\n    this.handleSetSrc = id => {\n      return () => {\n        this.setState({\n          src: songs[id].src,\n          currentTrackNumber: id\n        }, () => {\n          //when done setting state do this\n          if (this.player.current.paused) {\n            if (this.state.currentTime[id]) {\n              //if current time was set. otherwise start from 0\n              this.player.current.currentTime = this.state.currentTime[id]; //start from where stopped last time\n            }\n\n            this.player.current.play();\n            this.setState({\n              paused: false\n            });\n          } else {\n            this.player.current.currentTime = this.state.currentTime[id];\n            this.player.current.pause();\n            this.setState({\n              paused: true\n            });\n          }\n        });\n      };\n    };\n\n    this.handleTimeUpdate = event => {\n      let index = this.state.currentTrackNumber;\n      let updatedCurrentTime = [...this.state.currentTime];\n      updatedCurrentTime[index] = event.target.currentTime; //update single value in array\n\n      this.setState({\n        currentTime: updatedCurrentTime\n      }, () => console.log(this.state.currentTime));\n    };\n\n    this.handleDurationChange = () => {\n      let updatedDuartion = [...this.state.duration];\n      updatedDuartion[this.state.currentTrackNumber] = this.player.current.duration;\n      this.setState({\n        duration: updatedDuartion\n      });\n    };\n\n    this.handleScrubberClick = (amount, index) => {\n      let updatedDuartion = [...this.state.duration];\n      updatedDuartion[index] = amount;\n      this.setState({\n        currentTime: updatedDuartion\n      });\n    };\n\n    this.state = {\n      src: \"\",\n      paused: true,\n      duration: [],\n      currentTrackNumber: \"\",\n      currentTime: []\n    };\n    this.player = React.createRef();\n  }\n\n  render() {\n    const list = songs.map((item, index) => {\n      return /*#__PURE__*/React.createElement(Track, {\n        currentTime: this.state.currentTime[index],\n        currentTrackNumber: this.state.currentTrackNumber,\n        paused: this.state.paused,\n        duration: this.state.duration[index],\n        title: this.state.title,\n        key: index,\n        id: index,\n        setSrc: this.handleSetSrc,\n        scrubberClick: this.handleScrubberClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 9\n        }\n      });\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tracks\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"audio\", {\n      ref: this.player,\n      src: this.state.src,\n      onTimeUpdate: this.handleTimeUpdate,\n      onDurationChange: this.handleDurationChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }), list);\n  }\n\n}\n\nexport default MusicSection;","map":{"version":3,"sources":["/Users/konstantine/Desktop/My Page/Sass/my_music_website/react/koi-music/src/components/MusicSection.js"],"names":["React","Track","songs","MusicSection","Component","constructor","handleSetSrc","id","setState","src","currentTrackNumber","player","current","paused","state","currentTime","play","pause","handleTimeUpdate","event","index","updatedCurrentTime","target","console","log","handleDurationChange","updatedDuartion","duration","handleScrubberClick","amount","createRef","render","list","map","item","title"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Track from './Track'\nimport songs from '../songs'\n\nclass MusicSection extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      src: \"\",\n      paused: true,\n      duration: [],\n      currentTrackNumber: \"\",\n      currentTime: []\n    }\n\n    this.player = React.createRef()\n  }\n\n\n  handleSetSrc = (id) => {\n    return () => {\n      this.setState({\n        src: songs[id].src,\n        currentTrackNumber: id,\n      }, () => { //when done setting state do this\n        if (this.player.current.paused) {\n          if (this.state.currentTime[id]) { //if current time was set. otherwise start from 0\n            this.player.current.currentTime = this.state.currentTime[id] //start from where stopped last time\n          }\n          this.player.current.play()\n          this.setState({\n            paused: false,\n          })\n        } else {\n          this.player.current.currentTime = this.state.currentTime[id]\n          this.player.current.pause()\n          this.setState({\n            paused: true,\n          })\n        }\n      }) \n    }\n  } \n\n  handleTimeUpdate = (event) => {\n    let index = this.state.currentTrackNumber\n    let updatedCurrentTime = [...this.state.currentTime]\n    updatedCurrentTime[index] = event.target.currentTime //update single value in array\n    this.setState({\n      currentTime: updatedCurrentTime\n    }, () => console.log(this.state.currentTime))\n  }\n\n  handleDurationChange = () => {\n    let updatedDuartion = [...this.state.duration]\n    updatedDuartion[this.state.currentTrackNumber] = this.player.current.duration\n    this.setState({\n      duration: updatedDuartion\n    })\n  }\n\n  handleScrubberClick = (amount, index) => {\n    let updatedDuartion = [...this.state.duration]\n    updatedDuartion[index] = amount\n    this.setState({\n      currentTime: updatedDuartion\n    })\n  }\n\n  render() {\n    const list = songs.map((item, index) => {\n      return(\n        <Track \n          currentTime={this.state.currentTime[index]}\n          currentTrackNumber={this.state.currentTrackNumber}\n          paused={this.state.paused}\n          duration={this.state.duration[index]}\n          title={this.state.title}\n          key={index}\n          id={index}\n          setSrc={this.handleSetSrc}\n          scrubberClick={this.handleScrubberClick}\n        />\n      )\n    })\n    return(\n      <div className=\"tracks\" >\n        <audio \n          ref={this.player}\n          src={this.state.src}\n          onTimeUpdate={this.handleTimeUpdate}\n          onDurationChange={this.handleDurationChange}\n        />\n        \n        {list}\n        \n      </div>\n    )\n  }\n}\n\nexport default MusicSection"]},"metadata":{},"sourceType":"module"}