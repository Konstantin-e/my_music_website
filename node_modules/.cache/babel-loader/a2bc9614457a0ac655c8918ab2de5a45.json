{"ast":null,"code":"var _jsxFileName = \"/Users/konstantine/Desktop/My Page/Sass/my_music_website/react/koi-music/src/components/Track.js\";\nimport React from 'react';\n\nfunction Track(props) {\n  // let bg = document.getElementsByClassName(\"bg\");\n  // let tracks = document.getElementsByTagName(\"audio\");\n  // let scrubberIds = [];\n  // let scrubbers = document.getElementsByClassName(\"scrubber\");\n  // for (let i = 0; i < bg.length; i++) {\n  //   bg[i].addEventListener(\"click\", () => {\n  //     if (tracks[i].paused === true) { //if track is paused\n  //       for (let j = 0; j < tracks.length; j++) { //pause all tracks\n  //         tracks[j].pause();\n  //       }\n  //       tracks[i].play(); //play selected track\n  //       barStart(tracks[i], i);  //start the progress bar of selected track\n  //     } else {\n  //       // console.log(tracks[i]);\n  //       tracks[i].pause(); //else pause selected track\n  //       // barStop();\n  //     }\n  //     // console.log(bg[i].firstChild.nextSibling.classList.contains(\"play\"));\n  //     bg[i].firstChild.firstChild.classList.toggle(\"paused\"); // add or remove class name \"paused\" for styling\n  //     for (let j = 0; j < tracks.length; j++) {  //styling classes\n  //       if (bg[j].firstChild.firstChild.classList.contains(\"playing\")) {  //if something is playing turn it off\n  //         bg[j].firstChild.firstChild.classList.toggle(\"playing\"); \n  //         bg[j].firstChild.firstChild.classList.toggle(\"paused\");\n  //       }\n  //     }\n  //     bg[i].firstChild.firstChild.classList.toggle(\"playing\");  //then turn on selected track\n  //     if (tracks[i].paused === true) { //if the track audio is paused switch class to paused\n  //         bg[i].firstChild.firstChild.classList.toggle(\"playing\"); \n  //         bg[i].firstChild.firstChild.classList.toggle(\"paused\");\n  //     }\n  //   } );\n  // }\n  // //add play\n  // // progress bar\n  // function barStart(track, index) {\n  //   scrubberIds[index] = setInterval(frame, 100); //creates an id with respect to track number\n  //   function frame() {\n  //     if (track.ended || track.paused === true) {\n  //       clearInterval(scrubberIds[index]);\n  //     } else {\n  //       // console.log(track.currentTime);\n  //         scrubbers[index].setAttribute(\"value\", 100*track.currentTime/track.duration);\n  //     }\n  //   }\n  // }\n  // for (let i = 0; i < scrubbers.length; i++) {\n  //   scrubbers[i].addEventListener(\"click\", progressLocation);\n  // }\n  // function progressLocation(event) {\n  //   let relativeTrack = event.srcElement.previousElementSibling.firstElementChild.firstElementChild;\n  //   let duration = relativeTrack.duration;\n  //   let scrollAmount = event.pageX - event.srcElement.offsetLeft; // max is width of .bg = 200\n  //   relativeTrack.currentTime = scrollAmount * duration / 200;\n  // }\n  function play(event) {\n    const {\n      firstChild\n    } = event.currentTarget.firstChild; // firstChild here is the audio element\n\n    console.log(props.id); // if this track is paused\n\n    if (props.data.paused[props.id]) {\n      // if the state says that this track is paused\n      props.pauseAll(); //this will change the paused state of all tracks to true\n\n      firstChild.play(); //play selected track\n\n      props.changeState(props.id);\n      startProgressBar();\n    } else {\n      // if track isn't paused pause it\n      firstChild.pause();\n      props.changeState(props.id);\n    }\n  }\n\n  function startProgressBar() {\n    console.log('start progress bar');\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"player\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bg\",\n    onClick: play,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"paused\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"audio\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"source\", {\n    src: props.path,\n    type: \"audio/ogg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }), \"Your browser does not support the audio element.\"))), /*#__PURE__*/React.createElement(\"progress\", {\n    className: \"scrubber\",\n    value: \"0\",\n    max: \"100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default Track;","map":{"version":3,"sources":["/Users/konstantine/Desktop/My Page/Sass/my_music_website/react/koi-music/src/components/Track.js"],"names":["React","Track","props","play","event","firstChild","currentTarget","console","log","id","data","paused","pauseAll","changeState","startProgressBar","pause","path"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAEpB;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA,WAASC,IAAT,CAAcC,KAAd,EAAqB;AACnB,UAAM;AAACC,MAAAA;AAAD,QAAeD,KAAK,CAACE,aAAN,CAAoBD,UAAzC,CADmB,CACiC;;AACpDE,IAAAA,OAAO,CAACC,GAAR,CAAYN,KAAK,CAACO,EAAlB,EAFmB,CAGnB;;AACA,QAAIP,KAAK,CAACQ,IAAN,CAAWC,MAAX,CAAkBT,KAAK,CAACO,EAAxB,CAAJ,EAAiC;AAAE;AACjCP,MAAAA,KAAK,CAACU,QAAN,GAD+B,CACd;;AACjBP,MAAAA,UAAU,CAACF,IAAX,GAF+B,CAEb;;AAClBD,MAAAA,KAAK,CAACW,WAAN,CAAkBX,KAAK,CAACO,EAAxB;AACAK,MAAAA,gBAAgB;AACjB,KALD,MAKO;AAAE;AACPT,MAAAA,UAAU,CAACU,KAAX;AACAb,MAAAA,KAAK,CAACW,WAAN,CAAkBX,KAAK,CAACO,EAAxB;AACD;AACF;;AAED,WAASK,gBAAT,GAA4B;AAC1BP,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,IAAf;AAAoB,IAAA,OAAO,EAAEL,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,GAAG,EAAED,KAAK,CAACc,IAAnB;AAAyB,IAAA,IAAI,EAAC,WAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,qDADF,CADF,CADF,eASI;AAAU,IAAA,SAAS,EAAC,UAApB;AAA+B,IAAA,KAAK,EAAC,GAArC;AAAyC,IAAA,GAAG,EAAC,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,CADF;AAaD;;AAED,eAAef,KAAf","sourcesContent":["import React from 'react'\n\nfunction Track(props) {\n\n  // let bg = document.getElementsByClassName(\"bg\");\n  // let tracks = document.getElementsByTagName(\"audio\");\n  // let scrubberIds = [];\n  // let scrubbers = document.getElementsByClassName(\"scrubber\");\n\n\n  // for (let i = 0; i < bg.length; i++) {\n  //   bg[i].addEventListener(\"click\", () => {\n  //     if (tracks[i].paused === true) { //if track is paused\n  //       for (let j = 0; j < tracks.length; j++) { //pause all tracks\n  //         tracks[j].pause();\n  //       }\n  //       tracks[i].play(); //play selected track\n  //       barStart(tracks[i], i);  //start the progress bar of selected track\n  //     } else {\n  //       // console.log(tracks[i]);\n  //       tracks[i].pause(); //else pause selected track\n  //       // barStop();\n  //     }\n  //     // console.log(bg[i].firstChild.nextSibling.classList.contains(\"play\"));\n  //     bg[i].firstChild.firstChild.classList.toggle(\"paused\"); // add or remove class name \"paused\" for styling\n  //     for (let j = 0; j < tracks.length; j++) {  //styling classes\n  //       if (bg[j].firstChild.firstChild.classList.contains(\"playing\")) {  //if something is playing turn it off\n  //         bg[j].firstChild.firstChild.classList.toggle(\"playing\"); \n  //         bg[j].firstChild.firstChild.classList.toggle(\"paused\");\n  //       }\n  //     }\n  //     bg[i].firstChild.firstChild.classList.toggle(\"playing\");  //then turn on selected track\n  //     if (tracks[i].paused === true) { //if the track audio is paused switch class to paused\n  //         bg[i].firstChild.firstChild.classList.toggle(\"playing\"); \n  //         bg[i].firstChild.firstChild.classList.toggle(\"paused\");\n  //     }\n  //   } );\n  // }\n\n  \n  // //add play\n  \n  \n  // // progress bar\n  // function barStart(track, index) {\n     \n  //   scrubberIds[index] = setInterval(frame, 100); //creates an id with respect to track number\n  \n  //   function frame() {\n  //     if (track.ended || track.paused === true) {\n  //       clearInterval(scrubberIds[index]);\n  //     } else {\n  //       // console.log(track.currentTime);\n  //         scrubbers[index].setAttribute(\"value\", 100*track.currentTime/track.duration);\n  //     }\n  //   }\n  // }\n  \n  \n  // for (let i = 0; i < scrubbers.length; i++) {\n  //   scrubbers[i].addEventListener(\"click\", progressLocation);\n  // }\n  \n  // function progressLocation(event) {\n  \n  //   let relativeTrack = event.srcElement.previousElementSibling.firstElementChild.firstElementChild;\n  //   let duration = relativeTrack.duration;\n  //   let scrollAmount = event.pageX - event.srcElement.offsetLeft; // max is width of .bg = 200\n  //   relativeTrack.currentTime = scrollAmount * duration / 200;\n  // }\n\n  function play(event) {\n    const {firstChild} = event.currentTarget.firstChild // firstChild here is the audio element\n    console.log(props.id)\n    // if this track is paused\n    if (props.data.paused[props.id]) { // if the state says that this track is paused\n      props.pauseAll() //this will change the paused state of all tracks to true\n      firstChild.play() //play selected track\n      props.changeState(props.id)\n      startProgressBar() \n    } else { // if track isn't paused pause it\n      firstChild.pause()\n      props.changeState(props.id)\n    }\n  }\n\n  function startProgressBar() {\n    console.log('start progress bar')\n  }\n\n  return(\n    <div className=\"player\">\n      <div className=\"bg\" onClick={play}>\n        <div className=\"paused\">\n          <audio>\n            <source src={props.path} type=\"audio/ogg\" />\n          Your browser does not support the audio element.\n          </audio>\n        </div>\n      </div>\n        <progress className=\"scrubber\" value=\"0\" max=\"100\"></progress>\n    </div>\n  )\n}\n\nexport default Track"]},"metadata":{},"sourceType":"module"}