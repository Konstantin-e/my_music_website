{"ast":null,"code":"var _jsxFileName = \"/Users/konstantine/Desktop/My Page/Sass/my_music_website/react/koi-music/src/components/Track.js\";\nimport React from 'react';\n\nclass Track extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      theNode: \"\"\n    };\n  } // let bg = document.getElementsByClassName(\"bg\");\n  // let tracks = document.getElementsByTagName(\"audio\");\n  // let scrubberIds = [];\n  // let scrubbers = document.getElementsByClassName(\"scrubber\");\n  // for (let i = 0; i < bg.length; i++) {\n  //   bg[i].addEventListener(\"click\", () => {\n  //     if (tracks[i].paused === true) { //if track is paused\n  //       for (let j = 0; j < tracks.length; j++) { //pause all tracks\n  //         tracks[j].pause();\n  //       }\n  //       tracks[i].play(); //play selected track\n  //       barStart(tracks[i], i);  //start the progress bar of selected track\n  //     } else {\n  //       // console.log(tracks[i]);\n  //       tracks[i].pause(); //else pause selected track\n  //       // barStop();\n  //     }\n  //     // console.log(bg[i].firstChild.nextSibling.classList.contains(\"play\"));\n  //     bg[i].firstChild.firstChild.classList.toggle(\"paused\"); // add or remove class name \"paused\" for styling\n  //     for (let j = 0; j < tracks.length; j++) {  //styling classes\n  //       if (bg[j].firstChild.firstChild.classList.contains(\"playing\")) {  //if something is playing turn it off\n  //         bg[j].firstChild.firstChild.classList.toggle(\"playing\"); \n  //         bg[j].firstChild.firstChild.classList.toggle(\"paused\");\n  //       }\n  //     }\n  //     bg[i].firstChild.firstChild.classList.toggle(\"playing\");  //then turn on selected track\n  //     if (tracks[i].paused === true) { //if the track audio is paused switch class to paused\n  //         bg[i].firstChild.firstChild.classList.toggle(\"playing\"); \n  //         bg[i].firstChild.firstChild.classList.toggle(\"paused\");\n  //     }\n  //   } );\n  // }\n  // //add play\n  // // progress bar\n  // function barStart(track, index) {\n  //   scrubberIds[index] = setInterval(frame, 100); //creates an id with respect to track number\n  //   function frame() {\n  //     if (track.ended || track.paused === true) {\n  //       clearInterval(scrubberIds[index]);\n  //     } else {\n  //       // console.log(track.currentTime);\n  //         scrubbers[index].setAttribute(\"value\", 100*track.currentTime/track.duration);\n  //     }\n  //   }\n  // }\n  // for (let i = 0; i < scrubbers.length; i++) {\n  //   scrubbers[i].addEventListener(\"click\", progressLocation);\n  // }\n  // function progressLocation(event) {\n  //   let relativeTrack = event.srcElement.previousElementSibling.firstElementChild.firstElementChild;\n  //   let duration = relativeTrack.duration;\n  //   let scrollAmount = event.pageX - event.srcElement.offsetLeft; // max is width of .bg = 200\n  //   relativeTrack.currentTime = scrollAmount * duration / 200;\n  // }\n\n\n  play(event) {\n    const {\n      firstChild\n    } = event.currentTarget.firstChild; // firstChild here is the audio element\n\n    console.log(firstChild);\n    this.setState({\n      node: firstChild\n    }); // if this track is paused\n\n    if (this.state.node.paused) {\n      // if the state says that this track is paused\n      this.props.pauseAll(); //this will change the paused state of all tracks to true\n\n      firstChild.play(); //play selected track\n\n      props.changeState(this.props.id); //update parent state\n\n      startProgressBar();\n    } else {\n      // if track isn't paused pause it\n      firstChild.pause();\n      props.changeState(this.props.id);\n    }\n\n    firstChild.parentElement.classList.toggle(\"paused\"); // toggle style class\n\n    firstChild.parentElement.classList.toggle(\"playing\"); // toggle style class\n  }\n\n  startProgressBar() {\n    console.log('start progress bar');\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"player\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"bg\",\n      onClick: play,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"paused\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"audio\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"source\", {\n      src: this.props.path,\n      type: \"audio/ogg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 15\n      }\n    }), \"Your browser does not support the audio element.\"))), /*#__PURE__*/React.createElement(\"progress\", {\n      className: \"scrubber\",\n      value: \"0\",\n      max: \"100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }\n    }));\n  }\n\n}\n\nexport default Track;","map":{"version":3,"sources":["/Users/konstantine/Desktop/My Page/Sass/my_music_website/react/koi-music/src/components/Track.js"],"names":["React","Track","Component","constructor","state","theNode","play","event","firstChild","currentTarget","console","log","setState","node","paused","props","pauseAll","changeState","id","startProgressBar","pause","parentElement","classList","toggle","render","path"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,KAAN,SAAoBD,KAAK,CAACE,SAA1B,CAAoC;AAClCC,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE;AADE,KAAb;AAGD,GANiC,CAQlC;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;AAEAC,EAAAA,IAAI,CAACC,KAAD,EAAQ;AACV,UAAM;AAACC,MAAAA;AAAD,QAAeD,KAAK,CAACE,aAAN,CAAoBD,UAAzC,CADU,CAC0C;;AACpDE,IAAAA,OAAO,CAACC,GAAR,CAAYH,UAAZ;AACA,SAAKI,QAAL,CAAc;AACZC,MAAAA,IAAI,EAAEL;AADM,KAAd,EAHU,CAMV;;AACA,QAAI,KAAKJ,KAAL,CAAWS,IAAX,CAAgBC,MAApB,EAA4B;AAAE;AAC5B,WAAKC,KAAL,CAAWC,QAAX,GAD0B,CACJ;;AACtBR,MAAAA,UAAU,CAACF,IAAX,GAF0B,CAER;;AAClBS,MAAAA,KAAK,CAACE,WAAN,CAAkB,KAAKF,KAAL,CAAWG,EAA7B,EAH0B,CAGO;;AACjCC,MAAAA,gBAAgB;AACjB,KALD,MAKO;AAAE;AACPX,MAAAA,UAAU,CAACY,KAAX;AACAL,MAAAA,KAAK,CAACE,WAAN,CAAkB,KAAKF,KAAL,CAAWG,EAA7B;AACD;;AACDV,IAAAA,UAAU,CAACa,aAAX,CAAyBC,SAAzB,CAAmCC,MAAnC,CAA0C,QAA1C,EAhBU,CAgB0C;;AACpDf,IAAAA,UAAU,CAACa,aAAX,CAAyBC,SAAzB,CAAmCC,MAAnC,CAA0C,SAA1C,EAjBU,CAiB2C;AAEtD;;AAEDJ,EAAAA,gBAAgB,GAAG;AACjBT,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD;;AAEDa,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,IAAf;AAAoB,MAAA,OAAO,EAAElB,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAQ,MAAA,GAAG,EAAE,KAAKS,KAAL,CAAWU,IAAxB;AAA8B,MAAA,IAAI,EAAC,WAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,qDADF,CADF,CADF,eASI;AAAU,MAAA,SAAS,EAAC,UAApB;AAA+B,MAAA,KAAK,EAAC,GAArC;AAAyC,MAAA,GAAG,EAAC,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATJ,CADF;AAaD;;AAlHiC;;AAuHpC,eAAexB,KAAf","sourcesContent":["import React from 'react'\n\nclass Track extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      theNode: \"\"\n    }\n  }\n\n  // let bg = document.getElementsByClassName(\"bg\");\n  // let tracks = document.getElementsByTagName(\"audio\");\n  // let scrubberIds = [];\n  // let scrubbers = document.getElementsByClassName(\"scrubber\");\n\n\n  // for (let i = 0; i < bg.length; i++) {\n  //   bg[i].addEventListener(\"click\", () => {\n  //     if (tracks[i].paused === true) { //if track is paused\n  //       for (let j = 0; j < tracks.length; j++) { //pause all tracks\n  //         tracks[j].pause();\n  //       }\n  //       tracks[i].play(); //play selected track\n  //       barStart(tracks[i], i);  //start the progress bar of selected track\n  //     } else {\n  //       // console.log(tracks[i]);\n  //       tracks[i].pause(); //else pause selected track\n  //       // barStop();\n  //     }\n  //     // console.log(bg[i].firstChild.nextSibling.classList.contains(\"play\"));\n  //     bg[i].firstChild.firstChild.classList.toggle(\"paused\"); // add or remove class name \"paused\" for styling\n  //     for (let j = 0; j < tracks.length; j++) {  //styling classes\n  //       if (bg[j].firstChild.firstChild.classList.contains(\"playing\")) {  //if something is playing turn it off\n  //         bg[j].firstChild.firstChild.classList.toggle(\"playing\"); \n  //         bg[j].firstChild.firstChild.classList.toggle(\"paused\");\n  //       }\n  //     }\n  //     bg[i].firstChild.firstChild.classList.toggle(\"playing\");  //then turn on selected track\n  //     if (tracks[i].paused === true) { //if the track audio is paused switch class to paused\n  //         bg[i].firstChild.firstChild.classList.toggle(\"playing\"); \n  //         bg[i].firstChild.firstChild.classList.toggle(\"paused\");\n  //     }\n  //   } );\n  // }\n\n  \n  // //add play\n  \n  \n  // // progress bar\n  // function barStart(track, index) {\n     \n  //   scrubberIds[index] = setInterval(frame, 100); //creates an id with respect to track number\n  \n  //   function frame() {\n  //     if (track.ended || track.paused === true) {\n  //       clearInterval(scrubberIds[index]);\n  //     } else {\n  //       // console.log(track.currentTime);\n  //         scrubbers[index].setAttribute(\"value\", 100*track.currentTime/track.duration);\n  //     }\n  //   }\n  // }\n  \n  \n  // for (let i = 0; i < scrubbers.length; i++) {\n  //   scrubbers[i].addEventListener(\"click\", progressLocation);\n  // }\n  \n  // function progressLocation(event) {\n  \n  //   let relativeTrack = event.srcElement.previousElementSibling.firstElementChild.firstElementChild;\n  //   let duration = relativeTrack.duration;\n  //   let scrollAmount = event.pageX - event.srcElement.offsetLeft; // max is width of .bg = 200\n  //   relativeTrack.currentTime = scrollAmount * duration / 200;\n  // }\n\n  play(event) {\n    const {firstChild} = event.currentTarget.firstChild // firstChild here is the audio element\n    console.log(firstChild)\n    this.setState({\n      node: firstChild\n    })\n    // if this track is paused\n    if (this.state.node.paused) { // if the state says that this track is paused\n      this.props.pauseAll() //this will change the paused state of all tracks to true\n      firstChild.play() //play selected track\n      props.changeState(this.props.id) //update parent state\n      startProgressBar() \n    } else { // if track isn't paused pause it\n      firstChild.pause()\n      props.changeState(this.props.id)\n    }\n    firstChild.parentElement.classList.toggle(\"paused\") // toggle style class\n    firstChild.parentElement.classList.toggle(\"playing\") // toggle style class\n    \n  }\n\n  startProgressBar() {\n    console.log('start progress bar')\n  }\n\n  render() {\n    return(\n      <div className=\"player\">\n        <div className=\"bg\" onClick={play}>\n          <div className=\"paused\">\n            <audio>\n              <source src={this.props.path} type=\"audio/ogg\" />\n                Your browser does not support the audio element.\n            </audio>\n          </div>\n        </div>\n          <progress className=\"scrubber\" value=\"0\" max=\"100\"></progress>\n      </div>\n    )\n  }\n\n  \n}\n\nexport default Track"]},"metadata":{},"sourceType":"module"}