{"ast":null,"code":"var _jsxFileName = \"/Users/konstantine/Desktop/My Page/Sass/my_music_website/react/koi-music/src/components/Track.js\";\nimport React from 'react';\n\nfunction Track(props) {\n  let bg = document.getElementsByClassName(\"bg\");\n  let tracks = document.getElementsByTagName(\"audio\"); // const trackNames = [\"Deep.mp3\", \"Dog's Tail.mp3\", \"Into the Night.mp3\", \"Paprika.mp3\"];\n\n  let scrubberIds = [];\n  let scrubbers = document.getElementsByClassName(\"scrubber\"); // // progress bar\n\n  function barStart(track, index) {\n    scrubberIds[index] = setInterval(frame, 100); //creates an id with respect to track number\n\n    function frame() {\n      if (track.ended || track.paused === true) {\n        clearInterval(scrubberIds[index]);\n      } else {\n        // console.log(track.currentTime);\n        scrubbers[index].setAttribute(\"value\", 100 * track.currentTime / track.duration);\n      }\n    }\n  }\n\n  for (let i = 0; i < scrubbers.length; i++) {\n    scrubbers[i].addEventListener(\"click\", progressLocation);\n  }\n\n  function progressLocation(event) {\n    let relativeTrack = event.srcElement.previousElementSibling.firstElementChild.firstElementChild;\n    let duration = relativeTrack.duration;\n    let scrollAmount = event.pageX - event.srcElement.offsetLeft; // max is width of .bg = 200\n\n    relativeTrack.currentTime = scrollAmount * duration / 200;\n  } // if (!props.paused) {\n  //   let scrubberId = setInterval(frame, 100);\n  //   function frame() {\n  //     if (props.currentTime === props.duration || track.paused) {\n  //       clearInterval(scrubberIds[index]);\n  //     } else {\n  //       // console.log(track.currentTime);\n  //         scrubbers[index].setAttribute(\"value\", 100*track.currentTime/track.duration);\n  //     }\n  //   }\n  // }\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"player\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bg\",\n    onClick: props.setSrc(props.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: !props.paused && props.id === props.currentTrackNumber ? \"playing\" : \"paused\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"progress\", {\n    className: \"scrubber\",\n    value: \"0\",\n    max: \"100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default Track;","map":{"version":3,"sources":["/Users/konstantine/Desktop/My Page/Sass/my_music_website/react/koi-music/src/components/Track.js"],"names":["React","Track","props","bg","document","getElementsByClassName","tracks","getElementsByTagName","scrubberIds","scrubbers","barStart","track","index","setInterval","frame","ended","paused","clearInterval","setAttribute","currentTime","duration","i","length","addEventListener","progressLocation","event","relativeTrack","srcElement","previousElementSibling","firstElementChild","scrollAmount","pageX","offsetLeft","setSrc","id","currentTrackNumber"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAEpB,MAAIC,EAAE,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,IAAhC,CAAT;AACF,MAAIC,MAAM,GAAGF,QAAQ,CAACG,oBAAT,CAA8B,OAA9B,CAAb,CAHsB,CAItB;;AACA,MAAIC,WAAW,GAAG,EAAlB;AACA,MAAIC,SAAS,GAAGL,QAAQ,CAACC,sBAAT,CAAgC,UAAhC,CAAhB,CANsB,CAQpB;;AACA,WAASK,QAAT,CAAkBC,KAAlB,EAAyBC,KAAzB,EAAgC;AAE9BJ,IAAAA,WAAW,CAACI,KAAD,CAAX,GAAqBC,WAAW,CAACC,KAAD,EAAQ,GAAR,CAAhC,CAF8B,CAEgB;;AAE9C,aAASA,KAAT,GAAiB;AACf,UAAIH,KAAK,CAACI,KAAN,IAAeJ,KAAK,CAACK,MAAN,KAAiB,IAApC,EAA0C;AACxCC,QAAAA,aAAa,CAACT,WAAW,CAACI,KAAD,CAAZ,CAAb;AACD,OAFD,MAEO;AACL;AACEH,QAAAA,SAAS,CAACG,KAAD,CAAT,CAAiBM,YAAjB,CAA8B,OAA9B,EAAuC,MAAIP,KAAK,CAACQ,WAAV,GAAsBR,KAAK,CAACS,QAAnE;AACH;AACF;AACF;;AAED,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,SAAS,CAACa,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzCZ,IAAAA,SAAS,CAACY,CAAD,CAAT,CAAaE,gBAAb,CAA8B,OAA9B,EAAuCC,gBAAvC;AACD;;AAED,WAASA,gBAAT,CAA0BC,KAA1B,EAAiC;AAE/B,QAAIC,aAAa,GAAGD,KAAK,CAACE,UAAN,CAAiBC,sBAAjB,CAAwCC,iBAAxC,CAA0DA,iBAA9E;AACA,QAAIT,QAAQ,GAAGM,aAAa,CAACN,QAA7B;AACA,QAAIU,YAAY,GAAGL,KAAK,CAACM,KAAN,GAAcN,KAAK,CAACE,UAAN,CAAiBK,UAAlD,CAJ+B,CAI+B;;AAC9DN,IAAAA,aAAa,CAACP,WAAd,GAA4BW,YAAY,GAAGV,QAAf,GAA0B,GAAtD;AACD,GAjCmB,CAmCpB;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,IAAf;AAAoB,IAAA,OAAO,EAAElB,KAAK,CAAC+B,MAAN,CAAa/B,KAAK,CAACgC,EAAnB,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAE,CAAChC,KAAK,CAACc,MAAP,IAAiBd,KAAK,CAACgC,EAAN,KAAahC,KAAK,CAACiC,kBAApC,GAAyD,SAAzD,GAAqE,QAArF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,eAMI;AAAU,IAAA,SAAS,EAAC,UAApB;AAA+B,IAAA,KAAK,EAAC,GAArC;AAAyC,IAAA,GAAG,EAAC,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,CADF;AAYD;;AAED,eAAelC,KAAf","sourcesContent":["import React from 'react'\n\nfunction Track(props) {\n\n  let bg = document.getElementsByClassName(\"bg\");\nlet tracks = document.getElementsByTagName(\"audio\");\n// const trackNames = [\"Deep.mp3\", \"Dog's Tail.mp3\", \"Into the Night.mp3\", \"Paprika.mp3\"];\nlet scrubberIds = [];\nlet scrubbers = document.getElementsByClassName(\"scrubber\");\n\n  // // progress bar\n  function barStart(track, index) {\n     \n    scrubberIds[index] = setInterval(frame, 100); //creates an id with respect to track number\n  \n    function frame() {\n      if (track.ended || track.paused === true) {\n        clearInterval(scrubberIds[index]);\n      } else {\n        // console.log(track.currentTime);\n          scrubbers[index].setAttribute(\"value\", 100*track.currentTime/track.duration);\n      }\n    }\n  }\n  \n  for (let i = 0; i < scrubbers.length; i++) {\n    scrubbers[i].addEventListener(\"click\", progressLocation);\n  }\n  \n  function progressLocation(event) {\n  \n    let relativeTrack = event.srcElement.previousElementSibling.firstElementChild.firstElementChild;\n    let duration = relativeTrack.duration;\n    let scrollAmount = event.pageX - event.srcElement.offsetLeft; // max is width of .bg = 200\n    relativeTrack.currentTime = scrollAmount * duration / 200;\n  }\n\n  // if (!props.paused) {\n  //   let scrubberId = setInterval(frame, 100);\n\n  //   function frame() {\n  //     if (props.currentTime === props.duration || track.paused) {\n  //       clearInterval(scrubberIds[index]);\n  //     } else {\n  //       // console.log(track.currentTime);\n  //         scrubbers[index].setAttribute(\"value\", 100*track.currentTime/track.duration);\n  //     }\n  //   }\n  // }\n\n  return(\n    <div className=\"player\">\n      <div className=\"bg\" onClick={props.setSrc(props.id)}>\n        <div className={!props.paused && props.id === props.currentTrackNumber ? \"playing\" : \"paused\"}>\n          \n        </div>\n      </div>\n        <progress className=\"scrubber\" value=\"0\" max=\"100\"></progress>\n    </div>\n  )\n\n  \n}\n\nexport default Track"]},"metadata":{},"sourceType":"module"}