{"ast":null,"code":"var _jsxFileName = \"/Users/konstantine/Desktop/My Page/Sass/my_music_website/react/koi-music/src/components/Track.js\";\nimport React from 'react';\n\nfunction Track(props) {\n  // for (let i = 0; i < scrubbers.length; i++) {\n  //   scrubbers[i].addEventListener(\"click\", progressLocation);\n  // }\n  // function progressLocation(event) {\n  //   let relativeTrack = event.srcElement.previousElementSibling.firstElementChild.firstElementChild;\n  //   let duration = relativeTrack.duration;\n  //   let scrollAmount = event.pageX - event.srcElement.offsetLeft; // max is width of .bg = 200\n  //   relativeTrack.currentTime = scrollAmount * duration / 200;\n  // }\n  // if (!props.paused && props.id === props.currentTrackNumber) {\n  //   let scrubberId = setInterval(frame, 100);\n  //   function frame() {\n  //     if (props.currentTime === props.duration || track.paused) {\n  //       clearInterval(scrubberId);\n  //     } else {\n  //         scrubbers[index].setAttribute(\"value\", 100*track.currentTime/track.duration);\n  //     }\n  //   }\n  // }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"player\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bg\",\n    onClick: props.setSrc(props.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: !props.paused && props.id === props.currentTrackNumber ? \"playing\" : \"paused\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"progress\", {\n    onClick: event => {\n      let amount = event.pageX - event.srcElement.offsetLeft;\n      props.scrubberClick(amount);\n    },\n    className: \"scrubber\",\n    value: props.duration && props.currentTime ? 100 * props.currentTime / props.duration : 0,\n    max: \"100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default Track;","map":{"version":3,"sources":["/Users/konstantine/Desktop/My Page/Sass/my_music_website/react/koi-music/src/components/Track.js"],"names":["React","Track","props","setSrc","id","paused","currentTrackNumber","event","amount","pageX","srcElement","offsetLeft","scrubberClick","duration","currentTime"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAEpB;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,sBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,IAAf;AAAoB,IAAA,OAAO,EAAEA,KAAK,CAACC,MAAN,CAAaD,KAAK,CAACE,EAAnB,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAE,CAACF,KAAK,CAACG,MAAP,IAAiBH,KAAK,CAACE,EAAN,KAAaF,KAAK,CAACI,kBAApC,GAAyD,SAAzD,GAAqE,QAArF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,eAMI;AACE,IAAA,OAAO,EAAGC,KAAD,IAAW;AAClB,UAAIC,MAAM,GAAGD,KAAK,CAACE,KAAN,GAAcF,KAAK,CAACG,UAAN,CAAiBC,UAA5C;AACAT,MAAAA,KAAK,CAACU,aAAN,CAAoBJ,MAApB;AACD,KAJH;AAKE,IAAA,SAAS,EAAC,UALZ;AAME,IAAA,KAAK,EACHN,KAAK,CAACW,QAAN,IAAkBX,KAAK,CAACY,WAAxB,GACA,MAAMZ,KAAK,CAACY,WAAZ,GAA0BZ,KAAK,CAACW,QADhC,GAC2C,CAR/C;AAUE,IAAA,GAAG,EAAC,KAVN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,CADF;AAuBD;;AAED,eAAeZ,KAAf","sourcesContent":["import React from 'react'\n\nfunction Track(props) {\n\n  // for (let i = 0; i < scrubbers.length; i++) {\n  //   scrubbers[i].addEventListener(\"click\", progressLocation);\n  // }\n  \n  // function progressLocation(event) {\n  \n  //   let relativeTrack = event.srcElement.previousElementSibling.firstElementChild.firstElementChild;\n  //   let duration = relativeTrack.duration;\n  //   let scrollAmount = event.pageX - event.srcElement.offsetLeft; // max is width of .bg = 200\n  //   relativeTrack.currentTime = scrollAmount * duration / 200;\n  // }\n\n  // if (!props.paused && props.id === props.currentTrackNumber) {\n  //   let scrubberId = setInterval(frame, 100);\n\n  //   function frame() {\n  //     if (props.currentTime === props.duration || track.paused) {\n  //       clearInterval(scrubberId);\n  //     } else {\n  //         scrubbers[index].setAttribute(\"value\", 100*track.currentTime/track.duration);\n  //     }\n  //   }\n  // }\n  \n\n  return(\n    <div className=\"player\">\n      <div className=\"bg\" onClick={props.setSrc(props.id)}>\n        <div className={!props.paused && props.id === props.currentTrackNumber ? \"playing\" : \"paused\"}>\n          \n        </div>\n      </div>\n        <progress \n          onClick={(event) => {\n            let amount = event.pageX - event.srcElement.offsetLeft\n            props.scrubberClick(amount)\n          }}\n          className=\"scrubber\" \n          value={\n            props.duration && props.currentTime ?\n            100 * props.currentTime / props.duration : 0\n          } \n          max=\"100\" \n        /> \n    </div>\n  )\n\n  \n}\n\nexport default Track"]},"metadata":{},"sourceType":"module"}